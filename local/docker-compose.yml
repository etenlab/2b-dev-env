---
version: "2"
networks:
  par_net:
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/16

services:
  postgres_1:
    image: postgres:14.5
    container_name: postgres-db
    networks:
      par_net:
        ipv4_address: 10.1.1.2
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: asdfasdf
      POSTGRES_DB: eil_db_1
      # POSTGRES_MULTIPLE_DATABASES: eil_db_1, keycloak
    ports:
      - "5432:5432"
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    # volumes:
    #   - ./postgres-data:/var/lib/postgresql/data
    #   # copy the sql script to create tables
    #   - ./sql/create_keycloak_db.sql:/docker-entrypoint-initdb.d/create_keycloak_db.sql

  pgadmin:
    image: dpage/pgadmin4
    networks:
      par_net:
        ipv4_address: 10.1.1.4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@etenlab.com
      PGADMIN_DEFAULT_PASSWORD: asdfasdf
    ports:
      - 8104:80
    depends_on:
      - postgres_1

  # As mutliple database creation not working through yml, create a database named keycloak through pgadmin and then run docker-compose up
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    networks:
      par_net:
        ipv4_address: 10.1.1.5
    restart: on-failure
    links:
      - postgres_1
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: asdfasdf
      KC_DB_SCHEMA: public
      KC_DB_URL_DATABASE: keycloak_db
      KC_DB_URL_HOST: 10.1.1.2
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
    #JDBC_PARAMS: "ssl=true"
    ports:
      - 8080:8080
    command:
      - start-dev
      - --features admin-fine-grained-authz
    depends_on:
      - postgres_1
  graphql-engine:
    image: hasura/graphql-engine:v2.13.0
    networks:
      par_net:
        ipv4_address: 10.1.1.6
    ports:
      - "8081:8080"
    depends_on:
      - "postgres_1"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:asdfasdf@postgres_1:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:asdfasdf@postgres_1:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
